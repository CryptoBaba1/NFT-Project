{
  "address": "0x1C552ae4D7F793dff2Dd34B5C34275d3D1d5FFc6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "lowSvg",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "highSvg",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "highValue",
          "type": "int256"
        }
      ],
      "name": "CreatedNFT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "highValue",
          "type": "int256"
        }
      ],
      "name": "mintNft",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_tokenCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "Svg",
          "type": "string"
        }
      ],
      "name": "svgToImgUri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x267e96b11fb5877c4b43089c84f359d97a305bd4e0afcd971f801f57dc2c1648",
  "receipt": {
    "to": null,
    "from": "0xCDC891c631A7A5C48F022a4584Ac7df7001D61f3",
    "contractAddress": "0x1C552ae4D7F793dff2Dd34B5C34275d3D1d5FFc6",
    "transactionIndex": 11,
    "gasUsed": "22269135",
    "logsBloom": "0x
    "blockHash": "0xe9714a823b4a4194882519484e1c23062df3ec657e7a3c655cb02c9db7f8185f",
    "transactionHash": "0x267e96b11fb5877c4b43089c84f359d97a305bd4e0afcd971f801f57dc2c1648",
    "logs": [],
    "blockNumber": 11113637,
    "cumulativeGasUsed": "27399808",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8A753747A1Fa494EC906cE90E9f37563A8AF630e",
    "����\u0000\u0010JFIF\u0000\u0001\u0001\u0000\u0000\u0001\u0000\u0001\u0000\u0000��\u0000�\u0000\t\u0006\u0007\u0010\u0012\u0010\u0011\u0010\u0010\u0010\u0015\u0015\u0010\u0015\u0015\u0017\u0016\u0010\u0015\u0015\u0010\u0017\u0017\u0015\u0016\u0018\u0017\u0015\u0017\u0016\u0015\u0017\u0018\u0016\u0018\u001d( \u0018\u001a%\u001b\u0015\u0017!1!%)+...\u0017\u001f383,7(-.+\u0001\n\n\n\u000e\r\u000e\u001a\u0010\u0010\u001a/& !----/---+-----+-+5/------/.-----------------------��\u0000\u0011\b\u0000�\u0001,\u0003\u0001\"\u0000\u0002\u0011\u0001\u0003\u0011\u0001��\u0000\u001b\u0000\u0001\u0000\u0002\u0003\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007��\u00003\u0010\u0000\u0002\u0001\u0003\u0003\u0003\u0001\u0006\u0006\u0003\u0000\u0003\u0001\u0000\u0000\u0000\u0000\u0001\u0011\u0002\u0003!\u00041A\u0012Qaq\u0005\u0013\"���\u00062����B��\u0015#�\u0014��\u0000\u001a\u0001\u0000\u0002\u0003\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0003\u0004\u0005\u0006��\u0000'\u0011\u0000\u0002\u0002\u0001\u0004\u0001\u0003\u0004\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0011\u0003\u0004\u0012!1A\u0005\u0013Q\"aq�\u00142���\u0000\f\u0003\u0001\u0000\u0002\u0011\u0003\u0011\u0000?\u0000�h\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0012\u0001$�\u0000\t\b\u0012\u0001*\u0000\u0001$�\u0002\t\u0004�5\u0011\u0010\t�U$㍰���H�'�HVP\u0016h� �; �A[�\u0010\t �C\u0000\u0001P\u0002\u0019 �@T\u0012�+j�\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000$\u0002K\u0010�$\u0002I\u0000$\u0012X�\"\tH������%�V-<��D\\�1�K۴�\u0012����\u0012K��q�T��J���WM\u0016�W/���=\fč�T��Ư�h�\u0000�n*z�Iypb�M���,�\\�?�=��\u0005\u00172����3�\u001aV\u0018G�B925Ɋ�=3�j����c��\u0017T�T�\u0000��w���i<��SW�5-/\u000ev$�\u000e2����+�&'l���\u000b����d��S2㌔�O\u0019x,�k���+\u0007��ٖ����t�tsu�ʪ�w]ї'���\u0010�BOo��\u0004\u0019*��G6x�{4�A\u0004���@\u0000�\u0018*X�BH\b\u0000\u0015�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\tD�\\��$\u0012M \b�(���&��RI\u001b��\u001c�\tI%lˠ��r��=N�An\u000e�8��ٳ��M�I�\u0017\u001a�6��+�!>���ǎ8�#��Q,������S�����l�S��e�6��Z}=��4.ݥ�\u0018�\u0013��6]�->\rZ���N?�]5U5*R���2QZx���~�{T���\b�Y�ͣOONV�>�\u001bq�T>g�X�V�/\u000f�����I��Y\\�O�4��V�=:Q\u001b�3���5V�[��/q��|���]��ә��\u00021�΍\u0017ab�\rD��soE��\u0015����4z��>�2Qw0�x̼��fi��C�~ǥ�r�ݻ>��(���/��暖|�_�\u001e��~���u\u0018\u0014�k�zMKR���\u0000\u0007�h���Q�\f�����\u0004\u0012\f�\f��ele@\u0005#\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002�\u0012hH@�\u000b$h�-�-B=���\u00154��*������Ӻ�K�{}E��TҸR�c�=\u0006�\u001e��9>���i�i�/&��\u000eUUU\r��.���>#s\u001d-��1�>��\u0006�ʱClMk��\n��\\\u0018�X�|��&-M�O>g�$���._�\n��ܠ��3�J���Zki<g�y�Z�jWg�o�f�P��.[��d[��x����ן�{*���6�\u0011�90{�����ju\u001b��Ӎ�h���ڊ�j��\u0011b������\u000b:\u0014|\u000f\u000f9��*\u001a�<�k��b��\"��S��c;rQj\u001fT�\u001d���Ӻ�_�'�k��\\�SX�P\u0015G�����*��Yֱ�U��U�����.���K��\u0000fttZ�8xY�\u0004уQ\u0016����{OF���f�G��Q���\u0015�ʟ�'��\u001c�n\u0014�������M�c �C8�Tl 0\u0019L�T\u0000P0\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010%\rv\u0005�!\u001b\u0012�!\u0019(ER74\u0016]Uc�{\u001b���K���j���cC_Zn�6o{J몪�uw��~\u001a��l^���QWOW\u000e1\u001ef\u000e\r�{?۝��\\*8\u000eo&g'�B�ϧ��%*�f\u001f��2W=n��&�|��4��Ko9�J{=�<\u0011f�+3R�X��W�IN\u001a��e�]+�����ijk}M�ҫ�\u001e�}\u0013�{�+���q�\u0019�\\�S�/�^�-U0�8�2��뫍�yID����E�J�[�1D�{v��Z�ҿ>�R�f���\n�\u0006k�CJ�\t)y��i�FW}����o�\u0014��������E\t�^��N��\u0000���)E�I� [�HO\u001b��\u001bt�k�)������\t��q����82���1\u0013��I1�k�um\\M%�\u001e�72��\u0017����ڹS_\u000eO��XI������4̙!Vu56z��-�?_�x���h�z7�\u0000���\u001c?��5�EOԧT�\u001c\u0007�K���eK�U�{$i��T2Hfi\f�\u0000�`\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�A(k�,I\u0004�bD�'C�z�EJV\u0019�FJ*:Z\\�YVH)*g�=���W��./�u:Rxx�<w<��R��0��6\n��tR�TV�3�\\�I��R�w�u��\u0000'\u000b\u001e5\t�+��~�8IC���\u0017�ջJ�Mm\n\\�9��ګ]Tu-�\u001e{Aέ$�3�\u0013:\u0018��\u0002�%TS��[Xs��]��6�U�\u0018]l�P�}\u001aT(��\ry���ɞ�\u0000C��4�'3&\u0014�*�Ӧɧh���u:Z�\nYP�9��4o-��L�U8����7�\u0013��ѡ�\n�$*�Dz���j�]Q=>�x�\u0006�ZK*˩�\u0017W�7���}[o��S]�d�tM4�9�'�\u000fм<~��J(�{�]][��\u0005�'ٵo�(M���ɿ�r�����F��[�Oln��ҵJ�4��K\u0011�3��i-���\u000f�\f�~ֻ7\u001e\u0012���n�v�{�bi�+9�\u0000��uuMUz��J�S��I�*(�2��ٝ��T0�2H�P\u0001@�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001(�P�`X\"\t4ő,�dc,�8�P�=\u000f�iUE�T�dt�4Eu��o�<���4���U�-�qo\tU꿓��ɾ\u0007'W�B{מ\u000ef��im\u000f�\u001997�յGgV��s�bNmzgVь���\u0000!�M�\u000b�8��5)FŹ���/�e�mt�5�\r��=mGt�\u0018�E�WѯS�y���V�d�UUO�y�;\u0010���؆��M>\u000bR�_x�\u001fS#�\\KXO��\u001357\u001e��\u0017��.�뜮勮\n�իF�뎨m��\u0006[\rCML�\u001f(rE�x{-��2��s��ρ$�\u001bj��6�J��b\u001dnb�\u0018ˌ�\u0000�#�\r&�\u0014������}S\u0004ȫ}���R�sUKg'fƙSn��y��8�+k�m�\u001b�mMu6�\u0012�M\u0018��O�v}��uiꪩ�\u000b>\u0017�<\u0005�z��z���Z|,�����&�u\u001a-��{q��ʲ��\u000e\u000eFu\u0011\u00042Hfyt2\u0000\u0005#\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004�\tC]� \u0002�\"I \u0016E��g��1�]N�O�o\u000f��#5��i���ͶE\u001a�K$\u001cOM���UJ��,�ݸ���\u0007��ө���yJ�\u0000�'\u000fQn���y��e�����.ѣr�I�/�ཛS5���\u0013���9����)(ny���\u0000&渤EV��\u0014�ٿ�6m�o�*\\*��\u0017�4�\u0000�Nq�~�j5\u000e�-q�o�8���j�9s\u000f\u001f$,�D�i��\u0006\u0007[dQSOoЇ��\u0005�86ڶ����\u0016�ކ��с�o����b�t�<�))�0X�%m*噪j\u001c���4���^R6.�\\6��c�2Qb\u0012Yk�**s�c�XU������\u001e��*\u0015Wj�[y|\u001a�+\t�M|+w\u001b/SK۞�M{�x�c\u001f{��\u0015lœ~y{q�\u0000~�/�:���̜��WQFp�y���b��TQ\u0004\u0012A͓-\u00042HeR�\b\u0000\u0015�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0012�%\r\u0001 \u0002�\u0002H$�`IjYBS/�:bg_�^�v���\u0000��v�z��\u0015�i�|����2پ�r�3��Z��\u0018��S���#�^��5\u001d��\u0018*�?E\u000f>���{g�%qxM��wnn�����h��\u001a�F/*�\\\u001a��3Q��ʇ������ҍ��>D:��������\u00047A:.{�2�iCm��\u0000o��j�)';�5���U��\u001f^a.pK|\u0010�d�7,��O��c���q%M),�\u001fs�b�ҥS�\u0011��/UUISO�>���)�\u0019?�:\u001aUSn�k���i���m���g2�E�P�:������������\u0014����\u0015ɎX�f�G��t���zi^��G>|��ܮY5�&6�V�S��t��x�\"\u001b \u0010q�#H\u0000���\u0003\u0004\u0015Ɍ\u0000\b�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0012�*X�;\u0010\u0000\u0012\u0000I\u0000�`I2T��!\u0017L�n�[80\u0013&�z�G�'\u001b6ޡ�͟R�;|J�ri&OQ�:�>�W��\u0006�M\u0011=N{Ad�[:�䙩�:�.\u000b�l��j�\t��W\u0012دWTBp�,#NH�\u0012�?\u0001��&Z�7�F��\u0012dɨr,H� \u0010f��`\u0000T��\u0000\u0011l\b\u0000\u0015�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0007�\u0016\u0000\u0016!\u0000\u0000�\u0000\u0006\u0000\u0012\u0007`\u0000\u0003�\u0000\u0000�\u0000\n��\u0001\u0016�\u0000\u0002\u0002\u0000\u0004X\u0002\u0000+\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001��",
    "����\u0000\u0010JFIF\u0000\u0001\u0001\u0000\u0000\u0001\u0000\u0001\u0000\u0000��\u0000�\u0000\t\u0006\u0007\u0013\u0013\u0012\u0015\u0012\u0012\u0012\u0015\u0015\u0015\u0015\u0017\u0015\u0015\u0015\u0015\u0016\u0018\u0017\u0017\u0015\u0015\u0017\u0015\u0017\u0016\u0017\u0015\u0015\u0015\u0015\u0018\u001d( \u0018\u001a%\u001b\u0015\u0015!1!%)+...\u0017\u001f383-7(-.+\u0001\n\n\n\u000e\r\u000e\u001a\u0010\u0010\u001b-%\u001f%------//-------------/----------------------------��\u0000\u0011\b\u0000�\u0001\u0013\u0003\u0001\"\u0000\u0002\u0011\u0001\u0003\u0011\u0001��\u0000\u001b\u0000\u0000\u0002\u0002\u0003\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0004\u0002\u0005\u0000\u0001\u0006\u0007��\u0000D\u0010\u0000\u0001\u0003\u0001\u0004\u0006\u0006\b\u0004\u0004\u0006\u0001\u0005\u0000\u0000\u0000\u0001\u0000\u0002\u0011\u0003\u0004\u0012!1\u0005AQaq�\u0013R����\u0006\u0014\u0015\"2B��b���Sr��\u0016#3C��c�������\u0000\u0019\u0001\u0000\u0003\u0001\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0003\u0004\u0001\u0000\u0005��\u00002\u0011\u0000\u0002\u0001\u0002\u0004\u0004\u0004\u0005\u0004\u0002\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0003\u0011\u0004\u00121Q\u0013!A�\u0014aq�\"B���\u0005\u0015R�#2b����\u0000\f\u0003\u0001\u0000\u0002\u0011\u0003\u0011\u0000?\u0000��X�<)B�\u0014�EāPr)j\u001b�)\u0003�\u0013�\r��3�\u0018\u001c'b+���9��%b�M�a\u0004S\u0006�qsFͿ{W)S\u0015��V@�ٽ2H�:�\u0015��;�ï\u0013���fJ�\u0013�\u0015V\u0017w*.�\u0010��Sh>���rYT�'(0\u0014�T�Q\u00037�l8�-j3B�Z��I*R)�.\r�S\fM�Ό�8Hu\n#HI��Ŕ�)�ƠUމ��\u0018- u��\t3�a�4�ئ�Ѡ\u0002�0�u\u0019�\u001e\t�%��t��\u0018\u000e9�WDl� \u00178�\f�e(\u001e�\u001aH�w\u0002 m�\u0015<��b�h�H�f�e��p\u0002C@��ܣ^�I��\u001c�\u0000d����\u0004L���*�9�\t'\f�f\u001d\bJ\\�\u001d\u0012\t��[��kco�Ԭ,�{�S\u0019���j�-�t�~�\u0016q\u0019�$�S\u0014\u001c�u�\t\n�2.��6!Q��g�\u0017�\"O$+Q�\u000eMTj\u0003��\u0016&Q\u0004\n��ֱP�p�3�O���fs�i�=\u001f��ƛ٘�\u0012��H�sgS��*�}�ƶ�\u0012/dHT\u0016�\u0004\u0018\"\u000e��ڬ�l�I�O��3U��t��\u000b���\u0004\u0014��_���~G0�\u001b�!����:\"����X��V�_����\u0006� �2(al���*�l[[�\u0011\u000b�\u0012�u\t�<!\u0018`!n`\\WB\u000e(\u0015�\t\u0000\u001d�$G��S\u0014��s�_QuH�1�v�GV��\b.$d\u0006�\n��: ��!��s\u000f\n�6q�=D� �*N��T�RF�#B�\b�j\u0016�F!i�;B�^�S�Z��\"�P\u0019�I\u001d�Q,�6�/>�[2�\u0014��(��B�Hm��Zp��a��S��b�w0@�c��R�Ϙ��s��t������ԫ�`tn�q�\u0002r\u0002b6nډc�_x\\�\u0001̜f`d�CF42\u001f������,���`�}�Yg���\u0001�:�&\u000e�9N\u001bN�\u0001Y�\u0001�\u0000Դ\u001eI�\u000eU�c�M�Z\u000bY��A�p;���m�pn\u0003f�Δ�I�$x\u0015OP r�>�<�\u001c�\u0017�:R5\u001a��\u0010\u001dH��N��S(�=�\u0002�&\u0002�^uBG���\u001c�$rȦ��!2���D\u0013����\u0010���\u001e�ͷ��\u0015��L\t$`��ZU�nL�z��J�9�\u0005�ť64\u0000\u0003@\u0003,\u0002����\u0003%��ү���#^��j�ɂ�V����� \u001c\n�\u001cM;ӌ�\u001d����\u00001$�}�G{\u001a��YXq��$H�\u000f�����X��/���H\u0014���+����5+R����ֆռ��Ð�AQ\u0016��g�\r�uٹX\u000b]��n�3<F�CkЄ\u0012\u001a�b1��\u000e+�\u0015�Ӫ��#�iCC\u001c\u0014�G\u0005R�P�\u0003�uV�\u001b\\�D\tJ�?z�b����\u001d;\u001b�M'�Sm\u0005v�\u001au\tNQ��#\u0012Zx~�e��\\\u0005\u001dN~�$����hf]:�0E�Oa���\u0001���H�\"2\u001fE+�'M���Q1�#�R4�I���\u0016\u0010`\u0018�d�V[ԏ�v;\u0013Q�\\B�\u0003�\u001eI�\u0016gFA�\u001cp\u0006\u001cq��Z�$\u0003�\u001c�\u000e�I\"�vb�>�Z����\u0003�*�\u0016\u0016v�65�'\u0013&6�}�Fx��W������>;���\u000f;��Z\u000e�\u0017�v�(X���%\u0003�a�$F��qh$k1ܓ�֜�G�\u0000\u001f\u0010HT���T��K�\u001b\u0016\u001a�(��VLQ�FM�\u0007T\n��\\�ӂZ��)RШ�H\tI �k%jUB�Y,�����s\u000e��\u000f���f�z�4�0��\u0019\nut��c\u0004k\u001a�����ڰek�|�\u0002��+�4�x\t2u�T��w,K�\f�\u0007t*\u0015 ���ŧ�%�eg��l�A����F�Z�6ȅ���a%N�A��:I:�\u001fei��6\u0012�Vb�NM�\u0013�n9\u001d}�&�\u001dq�ʀ��Rm��\\�:\u0005\u0018��\u0011����:�.�9L6�������Q�uu�[l�®kw�(�7�'cjB,��Pj���*T�5ٌF�6�HS�u}�L����ZFb)A�\u0006���\u0012#���Y�߇\u0003�\u0007�;�@ZpG�j;SaR\t�M5Q�lvͣ��t��xc�\u001c�9��\u0006�\u000b���3Uv�-vi��A����4�\u0019�B��]�\u0004\u0001��3(��v�iZ��{�%\u001c�2=�O�办}YeR�р\u0000ka:�*�;R�*��\u00189\u000f�\u001e1�>��/��jZ�]��L(0��\u0012­t�J�OYڊ�sGʨT�tB]E-X:�)g�5V�\u000e��j��Obz�=\u0019\u0007�\u0005�[uD'9=\"Y3e�e�D���!L�*$���J+\u000bl��B[[c.v��/%:e�h^NV{ِ�+r�6��^��#;�\u0012�VJ���t��p٪�K+�A��`��*�t�F�,Ô�U���کN��4ǃ���m��\u001e�(\u0005k�\n�bБ��\u001c����hG�hUmr+^�(\u000b�$[�Z\u001d[J��\u0016��eb�\u0004�j�P\u001dQA�C%61(�\u0012$��z�*\u000e\n���XV�JTb�-B}0���M:W+\u001c�2\u0013�hKԍ���䓥aW\u0010��7�ThK���%�\"��Nj��������܆J!z�r4)���^�yh��\u0010��K\u0005�nu���e�e�\u0017��޵�7��ޠ�\u0013��W��\n{��뷽k�.뷽vdj�\u0015\nmG�k���Z6\">f��\rT�\"҈҂�D|�\f�5�9[\u001c�Au\u001e\u0005M�U���-�b\u0007JCc���hע\u0007*��\u00023-A*T����!��� R��6�AX$�1ʤ\u001fQ�� �\u0000�5g��?\u0010\u001c�e\u001bjc�w#}h�]\u000fG0�������.��\u000e�V8e�T+қ�X�r�r8���Pu���$��8�.J\u001b���?��\u000e��\u0000���h\u0019N ��\u00178���|�KU���\u0004��&Mn\r�)j�*o��h�B6��\u001dʈ�\u0012���\u0006��70��SV�p���'q���T\r\u0012�5To�F��8CqSH��E6G\u0005����8�\b\t�*%��û���w\"R\u0001�\"w\u0016&M\u0003���,�eGx�9�\u0018Fx��1Pu�ڃG3�!Y�\u001d�\u0005�����f�c\u0012?H\bf�2/ۀ��z�q��@��\u001e�\\c8\u0005C���@�o�\u0003�208�s|B�sFĽQ�ؘ���e5[ �@�2��f\u0001Z=�\u0012fw�$k��\u001a��o\u0006�\u0004]Lo��[��8�$j����-4\u0013�'�ҙ�\u0015J� ���\u0017�\u0013��\b�YF���\u0017pM6���nh��ʪ]J#���E7FG��l4�ߜx'\u0005��\u0019��\u0011�B�A��\u001f�|%%�_�\u001e��t�\u0000��]�;\u000f�'��ߨ;\u000e?D6P3��,��Vv[3˃zW\t=V�jMJ�����\fT��!�T*�`U00�\\A��ܷ��E\u001a�ص�q���;�WWBՌk��\u001bM�?*�u���\u0015��̹�\u0019ׅ�\u0010�*j���\u0011�m\u0019Xl\u000e�\u001eDI���T*Y\u0006$��OE\u0013���9�ӣ�\u001e�R㽴繨\u0002�F��'x`\u0007�S)\\_5��\b��a���p\u001a�Ť��;E8@��\u000f�к\u000bE��\u0017\u0019����E(�\b�d��l&��hce:5�fd�Ш��_8t�g��\u0007~=ʾ���Z�yk\u0000�r��ؘ1cj�k\u0000���\u0002Uu��x�mQ�F�\u001b�i��3'E\u001c�[\u000b�1ݷ��Ꙇ\u001f���\u0000%v�\u001b�>'����ԝW\u0019���\u000f\u0012\u0015q�ބҤ��+�e�����\u0000u�Yj\u000f��[�\u0000Ȟ\u0015���w\n���B�1{\u0012�8\u0016}Q�b�G�I�g�triﾉ�O�;@\u001f��XRk�\u0000�h\u001e\u0002\u0011[�Gh�]���EX�8���[\u001d�\u001d�9��>\u0001X��N\u0007n2�\u000f\u000e��F\u000f\r\u0014���\u001c�9���Y�Vq��M��1t��cY���q=ģ�-�\u000f@v7�X�<;�ř��v�y�\u0003�\u0010�m\r���Z}��͓�@ةu\u0007o�*\u0014�Qj�T�7�9��mlˤ\u0007��rE\u0016V\f�\u001c\u0000�-�M��\u0011^\u0006Z�����Ps�\u0004*֬���G�9Q�\u001a��j4\fg�\u0012˳1��\u0015���7{��%Z�y��W4�j�����WVsr�j�����\u0017���P���@T��Rz�\u0011�*8�?$�G,�S�\u001e߼�4�\u0018�\u000fn<8�)��\u001b�09\u0004�*$b\u001d�c��$�G�L\u001dG��^1�\u000e�Gܭ��\u001f�8\u001eq\u000b)�\\~q��\u001d<�[�\u001aq9�p�SJT��ت1��.�iZ��5\u0018O\u0007�K%`�f���\u001bc�0Um=\u0010ݻ5\u001f'++\u000e��\b\u0004��x�\b��\u0014�gE�߰�\u001a�|V�/��\u000b��\u0005���w��̂\u0002��[I���Y2{�\u0001\u000b���&�kI!���\u001b�eM�,4�����\b��\t2I%�|Vԅ��-=nMF�\u001dG\u0018�~�\u0015_V�\u0005���y¯��mY1Ԏ\u001f3�{���V\u0016K(n 3�l\u001dz��-��p ��7yAHU\"���\u0014���Z��ͱ��b[>\ntk�#޶Q�M����W���S�Ꮪ��B>'��|�\u001e;.��/w��kW��ڪv2���r��jc5*\u001d��\u001egb�\u001dC952׳w�*��c\u0000j��S��[{H\u0019������kU\u001bN�G�ʕ�\u001dA�ߟ\u0015l�)9��y%*h��ڪU\"�\u0000\u00194��u~�>�_�\u0007,y\u0015!i�����c�c\u0000�\u0000������\u0007�Z��\"�'�\u0016���\u0000���m[k��g~=ɗ�`��\u0005�M�حR[\u0002�-�R}q�\u0003��\b�+�\u0019R.�C��M���\u0012�:������\f��A֊��\u0016�\u00005L��wN%�/\u0019\t�9�@<P*�);�\u001d���SS�߬;����\u0000U�\u0003E��\u0017�5��\b?�;Ή����Z<L���\f_=�\u001eiGY럘���&-�\u0005C�T<�����T�Ͽ�iѰ�A�B����c�@�#:�\u001c��Bm��\u0000T��A�@�S׿��G:0�O�\u0018�\u0002Q����q\u0004�%bj��w�~�KU��o\u0003p\u00052)�s���\u001fJ�9F�\u0000�!R��,;�\u001d�Bi�E��C�{`oA�R�����O<\u0013�\u0018\u001c^���\u0018\u001cG�Vt�}с�\u0016��\u001ekl�k5�#<Dn�\"��\u0010\u001c��,\u0000�mE��_׹\u00169��\u0017~h�(،\\�q\u0017���\u00002\u0011�&CH�\u001cu~��՚F\u0002���\u0012d�\u001c�%J\r�G\u0011\u0015���2ʔH���`�'�N��\u0002i\u0011Ǥ=�\u0015mM)I�5^�;N\u001c ��J7S�\u0019�A���W�{��o���]���\\�0c\u0004�D��{\u0015���N=�Ɓ�y�\u0018��h�^|�4�A�\u001dR;�#=$}8���a\u00060�g\u0014��$���\u0017������붍6\u0005/u�\u001c\"!�H;0�es�����m\u0018\u0019\u0001QΎ&\tԹ\u001a\u001e�ڀ�|7PkCgo�\b��\n��}g�����.�V�\u0018��0�jZ�\u0015J�*w�ًK��cDgt���\u001d�\nސQi�.?�ڎ훸��G�6�\u0017\u001dR'\u0003u�\u001d�Gz���M�\u0013/�1�d{\u0010���|��7�\f�:\u000bK�}N���\u0014��W<)�\u001c���OK(��\u0000�[�ϩ\u0005q\u0007ҫA��u�s�\"��唽,�\u0011y�ダ\u0003\u001c�\u0003�9~�n��\u0000`\u001e=o��;_�E�\u000b(V��\u0001�(v�2� Ѫ��#�W �M�\u0019\u0016���F\u001b��-\u001e��\\1�F��\u0007�(��|����o�}���Z2��� \u000f�J�6�\u0000�?��*\u001f�=a�w��\u0000��:����T�\u0016軓�\u0014���#��o.Λ�\u0018E\u0015�R�\u001b�mG\"O\u0006�虥�-Z�r.\u000b�\u0005b\u0017�c�}�\r_�<�\u001djd�����Um�ZND��|�EkV���.T��\u0000������\u0006��\u0013���D\u001f\u0004�*�`��\u000f5�T�՛�н�|T��\u001d����#�\u0000j�M�\u0015T��\u0017�HB'h�I�&]�Doj��\u0005�hyɓ��\u001d�B�\u0006\u0003��\u0007\u0001�bN��\u000b���\u0017e;�z0��!h���9�!����<{�\b��H�IH�s�S�\u001d�4�\u0000��\bo��nocx\u0010��\u0017\u001c���5\u0007�[�\u0017Y3|[�\u0014v�4�/�ڐ�iz\u001fĕ��}X�����P��\u0012F\u0004g��#���-�d�\u001dC��\u0011���:���I���\u0019$v¢�8Ln��A�rj�\u0015�\u000e��sy��h�\u0012�x\u000f�{��0��Ѩ\"��~�\u0019�/��q�\u001au|D�\fV�\t0�'`\"xc��\u00106rDe@1���\u001eH]?0�[Ⱥ�g\b�L���ᚃ�\u0019�\u0003��ȅSZ��\u0014�A�ã\r��N�X\u000f����'�\u0006O1��}\u000b�giü��;\\�N�\t��a��_��>�F�9���\u0004�z��-��t���|evF����|�i��\u0006\u000b��6���%;d4q\u000fq ��5Ӈ�\u0004��ݥ*kvc!��\tY\u000e\u0012�8���<��rVr�@�)GH�ϩ�5��\u0010\u001e�\u0006�ݝ���JV������\u0007\u0017\u001e\u0004���A�\u0018p\u0003\t\u0011�\u0005֢p!��9\u0015�\u0007�\u00009w1����c��lѢa�?.\u0018�������V#\\��A\\{߲Gj��&~���:_4���/�Ǳ�t�?�k��\u0013�TBN��^$\u0002Ѱ\t�+�\u0012��z%F�_s\u001e\"�\u0000*�_�U\u0001�2�0<��6p���>j��zΙ�|\u0011�!n�-=yڍ�\u0000G%/Z���yB�6��\u0014M��Â,�\u001c�r��G��#�B\u0014�\fo>w9�V\u000bk��Oj��\u001f\u0015�;6��;E��7\u001e9\"\u000bUS�7�Q{N���{\u0016Δ�N'�5�L̋�j�2�IhV\u0003�\u0007�\u0018��P�\"��xv��I�|�e31y�\u001a�G�X�\u0006���<���\u0016�g{��4#v\u0002V���s\u00016k��rѨ:����7�P��LM�\u000e��4�]\u000b@g\u001b��<ա`w��\u0012�lC���\u001a�.��1ӏKw+=�eh�[$��lV|�֑�5SF��=�%��88a�g\u0013͂�_n▫\u0005\u0010d�o3�(\u0013I�Qg\"��L�L\u001e?�\u000b�\u0018HF�k�$���S9`��2>\u0006�&\u001e��\u0010��\u001dH� xL�OL���˂\u0019�O���\u0000��Q�YY�5ݘ�\u001b��\f�P�@B�$\u001a��E��$@���X<�J�D1�֝G3ؤlT�=�s�1�(����H�'�\u000eu�\u0012���?�vN\u001c\u000e\u0013�dH��#\\�\u0004[>����:#8q\u001c\u0011ۡ��\u001d)�'\u0002\u0000�\u0006#\u0000���o�|p�{\u0015���� \u001e A�s�C�\u001d�\u0000h�WD�\u0000E�\u0017���\u0003ސd�\u0011xjR���=7\u000e��$|�i�q\u0006\u001d��\u001f\u0017\u000br��;�K�G\u000fi�@�.<�h&<�*�\u000b\u000f\\~_���hX����FD\b�\u0017|��k�\\ T�6�t\u001e�\bV>]`�\u0000>�x8��\u001eX�\u001eݯ�Z��4\u001c�h��f�&\u001bR�\u001b\"9\u0011�R�%7b:\u0017\u001f���\u0000q�\u0012;���g��Gz\u001b��^�O@S�v�:G�4A�/S��\u0002a�s'�b�N��;���g��\u000eZ�G\u0015��-1�\u000eIA��8Br����\u0000O��y鰻�߳����>\f\u000b��u����\u001b�LX���\u0007$q��vŇETꮶ�F\"(�N9��tjG���H\u0007�.0�\u000e�U�\u001a�Ʌh�j�Gr]gC^~\u0006�͂�^�gM���5�oC8\u000fϱ��&�T���Y슽B�����+:W\u001c�\u0017\u0010\u000e\u0011�\u001d\u001bW�ܱu �%b�)�\u0013�u�zתoX�@���F�fZ�g;pX�j�9�\u000248��\u0000\u0016,G���\n=�`�kRl�v�y-�F�:��E��\u0006Z \u000e}�\"׌q�bz|�K�6�wY��8\u000eH�t�ۅ�#�([X��/TnyGFǬ�n��-p�Z\u00134��<�I��8~�k\u0012e��ޝ�\u000f�*�Z�יga���n�bu\b1ອ\f�+��F\u001c��Zp�'\u00103�b���#��י���\u0000-&�'��cL��p�d5�4�E�L���\u0010U\u0000�n�\u001f\u000f�aX�B��?���\r$�.��y��Dh�`�8t��\u000b�3qt�#�bj�V_39S��4�\u000b��E��\u0000r�����9���\u001f�[��\u0015�\u0011�me��<='�(\u001a��ښ!��eGb8\u0014�wZ��{���>k\u0016*�b%Q�Iv\u0002�\b�7�k�\u0005�V��Rx���WQl�>+\u0016/C$WB,�oR\u0006�[Xi���Ls���b��\u0004�]L}�A�\u000bN�\u0015\u0016��D�8�X���O*��f[�|��\u0014i68A��bŜ4��I\u000b>�8���:�ň�\u0010\u000e��;�T�,X��\\��"
  ],
  "numDeployments": 1,
  "solcInputHash": "4646c99e64c0448c709e0aced65ae75a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"lowSvg\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"highSvg\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"highValue\",\"type\":\"int256\"}],\"name\":\"CreatedNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"highValue\",\"type\":\"int256\"}],\"name\":\"mintNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_tokenCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"Svg\",\"type\":\"string\"}],\"name\":\"svgToImgUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DynamicSvgNft.sol\":\"DynamicSvgNft\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/DynamicSvgNft.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.7;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"base64-sol/base64.sol\\\";\\r\\n\\r\\ncontract DynamicSvgNft is ERC721 {\\r\\n    uint256 public s_tokenCounter;\\r\\n    string private i_lowImgUri;\\r\\n    string private i_highImgUri;\\r\\n\\r\\n    mapping(uint256 => int256) private s_tokenIdToHighValues;\\r\\n    AggregatorV3Interface internal immutable i_priceFeed;\\r\\n    string private constant base64EncodedSvgPrefix = \\\"data:image/svg+xml;base64,\\\";\\r\\n    event CreatedNFT(uint256 indexed tokenId, int256 highValue);\\r\\n\\r\\n    constructor(\\r\\n        address priceFeedAddress,\\r\\n        string memory lowSvg,\\r\\n        string memory highSvg\\r\\n    ) ERC721(\\\"Dyanamic SvG NFT\\\", \\\"DSN\\\") {\\r\\n        s_tokenCounter = 0;\\r\\n        i_lowImgUri = svgToImgUri(lowSvg);\\r\\n        i_highImgUri = svgToImgUri(highSvg);\\r\\n        i_priceFeed = AggregatorV3Interface(priceFeedAddress);\\r\\n    }\\r\\n\\r\\n    function svgToImgUri(string memory Svg) public pure returns (string memory) {\\r\\n        string memory svgBase64Encoded = Base64.encode(bytes(string(abi.encodePacked(Svg))));\\r\\n        return string(abi.encodePacked(base64EncodedSvgPrefix, svgBase64Encoded));\\r\\n    }\\r\\n\\r\\n    function mintNft(int256 highValue) public {\\r\\n        s_tokenIdToHighValues[s_tokenCounter] = highValue;\\r\\n        emit CreatedNFT(s_tokenCounter, highValue);\\r\\n        _safeMint(msg.sender, s_tokenCounter);\\r\\n        s_tokenCounter = s_tokenCounter + 1;\\r\\n    }\\r\\n\\r\\n    function _baseURI() internal pure override returns (string memory) {\\r\\n        return \\\"data:application/json;base64,\\\";\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\r\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n        (, int256 price, , , ) = i_priceFeed.latestRoundData();\\r\\n        string memory imageURI = i_lowImgUri;\\r\\n        if (price >= s_tokenIdToHighValues[tokenId]) {\\r\\n            imageURI = i_highImgUri;\\r\\n        }\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    _baseURI(),\\r\\n                    Base64.encode(\\r\\n                        bytes(\\r\\n                            abi.encodePacked(\\r\\n                                '{\\\"name\\\":\\\"',\\r\\n                                name(), // You can add whatever name here\\r\\n                                '\\\", \\\"description\\\":\\\"An NFT that changes based on the Chainlink Feed\\\", ',\\r\\n                                '\\\"attributes\\\": [{\\\"trait_type\\\": \\\"coolness\\\", \\\"value\\\": 100}], \\\"image\\\":\\\"',\\r\\n                                imageURI,\\r\\n                                '\\\"}'\\r\\n                            )\\r\\n                        )\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf214d8245df7145de0af3ce1e2ce1a1e26eef6e8c393418447ec6805791e40ce\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200376f3803806200376f83398181016040528101906200003791906200064f565b6040518060400160405280601081526020017f4479616e616d696320537647204e4654000000000000000000000000000000008152506040518060400160405280600381526020017f44534e00000000000000000000000000000000000000000000000000000000008152508160009080519060200190620000bb9291906200039d565b508060019080519060200190620000d49291906200039d565b5050506000600681905550620000f0826200017160201b60201c565b60079080519060200190620001079291906200039d565b5062000119816200017160201b60201c565b60089080519060200190620001309291906200039d565b508273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250505050506200093a565b60606000620001ac836040516020016200018c919062000736565b6040516020818303038152906040526200020f60201b62000d451760201c565b90506040518060400160405280601a81526020017f646174613a696d6167652f7376672b786d6c3b6261736536342c00000000000081525081604051602001620001f89291906200074f565b604051602081830303815290604052915050919050565b6060600082511415620002345760405180602001604052806000815250905062000398565b60006040518060600160405280604081526020016200372f6040913990506000600360028551620002669190620007b0565b6200027291906200083c565b600462000280919062000874565b90506000602082620002939190620007b0565b67ffffffffffffffff811115620002af57620002ae620004e1565b5b6040519080825280601f01601f191660200182016040528015620002e25781602001600182028036833780820191505090505b509050818152600183018586518101602084015b8183101562000353576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825360018201915050620002f6565b60038951066001811462000370576002811462000381576200038c565b613d3d60f01b60028303526200038c565b603d60f81b60018303525b50505050508093505050505b919050565b828054620003ab9062000904565b90600052602060002090601f016020900481019282620003cf57600085556200041b565b82601f10620003ea57805160ff19168380011785556200041b565b828001600101855582156200041b579182015b828111156200041a578251825591602001919060010190620003fd565b5b5090506200042a91906200042e565b5090565b5b80821115620004495760008160009055506001016200042f565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200048e8262000461565b9050919050565b620004a08162000481565b8114620004ac57600080fd5b50565b600081519050620004c08162000495565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200051b82620004d0565b810181811067ffffffffffffffff821117156200053d576200053c620004e1565b5b80604052505050565b6000620005526200044d565b905062000560828262000510565b919050565b600067ffffffffffffffff821115620005835762000582620004e1565b5b6200058e82620004d0565b9050602081019050919050565b60005b83811015620005bb5780820151818401526020810190506200059e565b83811115620005cb576000848401525b50505050565b6000620005e8620005e28462000565565b62000546565b905082815260208101848484011115620006075762000606620004cb565b5b620006148482856200059b565b509392505050565b600082601f830112620006345762000633620004c6565b5b815162000646848260208601620005d1565b91505092915050565b6000806000606084860312156200066b576200066a62000457565b5b60006200067b86828701620004af565b935050602084015167ffffffffffffffff8111156200069f576200069e6200045c565b5b620006ad868287016200061c565b925050604084015167ffffffffffffffff811115620006d157620006d06200045c565b5b620006df868287016200061c565b9150509250925092565b600081519050919050565b600081905092915050565b60006200070c82620006e9565b620007188185620006f4565b93506200072a8185602086016200059b565b80840191505092915050565b6000620007448284620006ff565b915081905092915050565b60006200075d8285620006ff565b91506200076b8284620006ff565b91508190509392505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620007bd8262000777565b9150620007ca8362000777565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562000802576200080162000781565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000620008498262000777565b9150620008568362000777565b9250826200086957620008686200080d565b5b828204905092915050565b6000620008818262000777565b91506200088e8362000777565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615620008ca57620008c962000781565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200091d57607f821691505b60208210811415620009345762000933620008d5565b5b50919050565b60805160601c612dd6620009596000396000610a760152612dd66000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806342842e0e11610097578063a22cb46511610066578063a22cb465146102bf578063b88d4fde146102db578063c87b56dd146102f7578063e985e9c51461032757610100565b806342842e0e146102255780636352211e1461024157806370a082311461027157806395d89b41146102a157610100565b80630b21a83b116100d35780630b21a83b1461019f5780631e930812146101bd57806323b872dd146101d957806328e83cc8146101f557610100565b806301ffc9a71461010557806306fdde0314610135578063081812fc14610153578063095ea7b314610183575b600080fd5b61011f600480360381019061011a9190611a25565b610357565b60405161012c9190611a6d565b60405180910390f35b61013d610439565b60405161014a9190611b21565b60405180910390f35b61016d60048036038101906101689190611b79565b6104cb565b60405161017a9190611be7565b60405180910390f35b61019d60048036038101906101989190611c2e565b610511565b005b6101a7610629565b6040516101b49190611c7d565b60405180910390f35b6101d760048036038101906101d29190611cce565b61062f565b005b6101f360048036038101906101ee9190611cfb565b6106a7565b005b61020f600480360381019061020a9190611e83565b610707565b60405161021c9190611b21565b60405180910390f35b61023f600480360381019061023a9190611cfb565b610794565b005b61025b60048036038101906102569190611b79565b6107b4565b6040516102689190611be7565b60405180910390f35b61028b60048036038101906102869190611ecc565b610866565b6040516102989190611c7d565b60405180910390f35b6102a961091e565b6040516102b69190611b21565b60405180910390f35b6102d960048036038101906102d49190611f25565b6109b0565b005b6102f560048036038101906102f09190612006565b6109c6565b005b610311600480360381019061030c9190611b79565b610a28565b60405161031e9190611b21565b60405180910390f35b610341600480360381019061033c9190612089565b610cb1565b60405161034e9190611a6d565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061042257507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610432575061043182610ebe565b5b9050919050565b606060008054610448906120f8565b80601f0160208091040260200160405190810160405280929190818152602001828054610474906120f8565b80156104c15780601f10610496576101008083540402835291602001916104c1565b820191906000526020600020905b8154815290600101906020018083116104a457829003601f168201915b5050505050905090565b60006104d682610f28565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061051c826107b4565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561058d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105849061219c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166105ac610f73565b73ffffffffffffffffffffffffffffffffffffffff1614806105db57506105da816105d5610f73565b610cb1565b5b61061a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106119061222e565b60405180910390fd5b6106248383610f7b565b505050565b60065481565b80600960006006548152602001908152602001600020819055506006547f882d3b5a729a8bb95cf6c0083c99b42ecd9637123d4425bd7b768877fd8af8b08260405161067b919061225d565b60405180910390a261068f33600654611034565b600160065461069e91906122a7565b60068190555050565b6106b86106b2610f73565b82611052565b6106f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ee9061236f565b60405180910390fd5b6107028383836110e7565b505050565b606060006107338360405160200161071f91906123cb565b604051602081830303815290604052610d45565b90506040518060400160405280601a81526020017f646174613a696d6167652f7376672b786d6c3b6261736536342c0000000000008152508160405160200161077d9291906123e2565b604051602081830303815290604052915050919050565b6107af838383604051806020016040528060008152506109c6565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561085d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085490612452565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156108d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ce906124e4565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606001805461092d906120f8565b80601f0160208091040260200160405190810160405280929190818152602001828054610959906120f8565b80156109a65780601f1061097b576101008083540402835291602001916109a6565b820191906000526020600020905b81548152906001019060200180831161098957829003601f168201915b5050505050905090565b6109c26109bb610f73565b838361134e565b5050565b6109d76109d1610f73565b83611052565b610a16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0d9061236f565b60405180910390fd5b610a22848484846114bb565b50505050565b6060610a3382611517565b610a72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6990612576565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610ada57600080fd5b505afa158015610aee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b129190612602565b505050915050600060078054610b27906120f8565b80601f0160208091040260200160405190810160405280929190818152602001828054610b53906120f8565b8015610ba05780601f10610b7557610100808354040283529160200191610ba0565b820191906000526020600020905b815481529060010190602001808311610b8357829003601f168201915b5050505050905060096000858152602001908152602001600020548212610c4f5760088054610bce906120f8565b80601f0160208091040260200160405190810160405280929190818152602001828054610bfa906120f8565b8015610c475780601f10610c1c57610100808354040283529160200191610c47565b820191906000526020600020905b815481529060010190602001808311610c2a57829003601f168201915b505050505090505b610c57611583565b610c88610c62610439565b83604051602001610c74929190612845565b604051602081830303815290604052610d45565b604051602001610c999291906123e2565b60405160208183030381529060405292505050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6060600082511415610d6857604051806020016040528060008152509050610eb9565b6000604051806060016040528060408152602001612d616040913990506000600360028551610d9791906122a7565b610da191906128c4565b6004610dad91906128f5565b90506000602082610dbe91906122a7565b67ffffffffffffffff811115610dd757610dd6611d58565b5b6040519080825280601f01601f191660200182016040528015610e095781602001600182028036833780820191505090505b509050818152600183018586518101602084015b81831015610e78576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825360018201915050610e1d565b600389510660018114610e925760028114610ea257610ead565b613d3d60f01b6002830352610ead565b603d60f81b60018303525b50505050508093505050505b919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610f3181611517565b610f70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6790612452565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610fee836107b4565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b61104e8282604051806020016040528060008152506115c0565b5050565b60008061105e836107b4565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806110a0575061109f8185610cb1565b5b806110de57508373ffffffffffffffffffffffffffffffffffffffff166110c6846104cb565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611107826107b4565b73ffffffffffffffffffffffffffffffffffffffff161461115d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611154906129c1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156111cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c490612a53565b60405180910390fd5b6111d883838361161b565b6111e3600082610f7b565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112339190612a73565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461128a91906122a7565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611349838383611620565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156113bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b490612af3565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516114ae9190611a6d565b60405180910390a3505050565b6114c68484846110e7565b6114d284848484611625565b611511576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150890612b85565b60405180910390fd5b50505050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60606040518060400160405280601d81526020017f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815250905090565b6115ca83836117bc565b6115d76000848484611625565b611616576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160d90612b85565b60405180910390fd5b505050565b505050565b505050565b60006116468473ffffffffffffffffffffffffffffffffffffffff16611996565b156117af578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261166f610f73565b8786866040518563ffffffff1660e01b81526004016116919493929190612bfa565b602060405180830381600087803b1580156116ab57600080fd5b505af19250505080156116dc57506040513d601f19601f820116820180604052508101906116d99190612c5b565b60015b61175f573d806000811461170c576040519150601f19603f3d011682016040523d82523d6000602084013e611711565b606091505b50600081511415611757576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161174e90612b85565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506117b4565b600190505b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561182c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161182390612cd4565b60405180910390fd5b61183581611517565b15611875576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186c90612d40565b60405180910390fd5b6118816000838361161b565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546118d191906122a7565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461199260008383611620565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611a02816119cd565b8114611a0d57600080fd5b50565b600081359050611a1f816119f9565b92915050565b600060208284031215611a3b57611a3a6119c3565b5b6000611a4984828501611a10565b91505092915050565b60008115159050919050565b611a6781611a52565b82525050565b6000602082019050611a826000830184611a5e565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611ac2578082015181840152602081019050611aa7565b83811115611ad1576000848401525b50505050565b6000601f19601f8301169050919050565b6000611af382611a88565b611afd8185611a93565b9350611b0d818560208601611aa4565b611b1681611ad7565b840191505092915050565b60006020820190508181036000830152611b3b8184611ae8565b905092915050565b6000819050919050565b611b5681611b43565b8114611b6157600080fd5b50565b600081359050611b7381611b4d565b92915050565b600060208284031215611b8f57611b8e6119c3565b5b6000611b9d84828501611b64565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611bd182611ba6565b9050919050565b611be181611bc6565b82525050565b6000602082019050611bfc6000830184611bd8565b92915050565b611c0b81611bc6565b8114611c1657600080fd5b50565b600081359050611c2881611c02565b92915050565b60008060408385031215611c4557611c446119c3565b5b6000611c5385828601611c19565b9250506020611c6485828601611b64565b9150509250929050565b611c7781611b43565b82525050565b6000602082019050611c926000830184611c6e565b92915050565b6000819050919050565b611cab81611c98565b8114611cb657600080fd5b50565b600081359050611cc881611ca2565b92915050565b600060208284031215611ce457611ce36119c3565b5b6000611cf284828501611cb9565b91505092915050565b600080600060608486031215611d1457611d136119c3565b5b6000611d2286828701611c19565b9350506020611d3386828701611c19565b9250506040611d4486828701611b64565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611d9082611ad7565b810181811067ffffffffffffffff82111715611daf57611dae611d58565b5b80604052505050565b6000611dc26119b9565b9050611dce8282611d87565b919050565b600067ffffffffffffffff821115611dee57611ded611d58565b5b611df782611ad7565b9050602081019050919050565b82818337600083830152505050565b6000611e26611e2184611dd3565b611db8565b905082815260208101848484011115611e4257611e41611d53565b5b611e4d848285611e04565b509392505050565b600082601f830112611e6a57611e69611d4e565b5b8135611e7a848260208601611e13565b91505092915050565b600060208284031215611e9957611e986119c3565b5b600082013567ffffffffffffffff811115611eb757611eb66119c8565b5b611ec384828501611e55565b91505092915050565b600060208284031215611ee257611ee16119c3565b5b6000611ef084828501611c19565b91505092915050565b611f0281611a52565b8114611f0d57600080fd5b50565b600081359050611f1f81611ef9565b92915050565b60008060408385031215611f3c57611f3b6119c3565b5b6000611f4a85828601611c19565b9250506020611f5b85828601611f10565b9150509250929050565b600067ffffffffffffffff821115611f8057611f7f611d58565b5b611f8982611ad7565b9050602081019050919050565b6000611fa9611fa484611f65565b611db8565b905082815260208101848484011115611fc557611fc4611d53565b5b611fd0848285611e04565b509392505050565b600082601f830112611fed57611fec611d4e565b5b8135611ffd848260208601611f96565b91505092915050565b600080600080608085870312156120205761201f6119c3565b5b600061202e87828801611c19565b945050602061203f87828801611c19565b935050604061205087828801611b64565b925050606085013567ffffffffffffffff811115612071576120706119c8565b5b61207d87828801611fd8565b91505092959194509250565b600080604083850312156120a05761209f6119c3565b5b60006120ae85828601611c19565b92505060206120bf85828601611c19565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061211057607f821691505b60208210811415612124576121236120c9565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612186602183611a93565b91506121918261212a565b604082019050919050565b600060208201905081810360008301526121b581612179565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b6000612218603e83611a93565b9150612223826121bc565b604082019050919050565b600060208201905081810360008301526122478161220b565b9050919050565b61225781611c98565b82525050565b6000602082019050612272600083018461224e565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006122b282611b43565b91506122bd83611b43565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156122f2576122f1612278565b5b828201905092915050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000612359602e83611a93565b9150612364826122fd565b604082019050919050565b600060208201905081810360008301526123888161234c565b9050919050565b600081905092915050565b60006123a582611a88565b6123af818561238f565b93506123bf818560208601611aa4565b80840191505092915050565b60006123d7828461239a565b915081905092915050565b60006123ee828561239a565b91506123fa828461239a565b91508190509392505050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b600061243c601883611a93565b915061244782612406565b602082019050919050565b6000602082019050818103600083015261246b8161242f565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b60006124ce602983611a93565b91506124d982612472565b604082019050919050565b600060208201905081810360008301526124fd816124c1565b9050919050565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b6000612560602f83611a93565b915061256b82612504565b604082019050919050565b6000602082019050818103600083015261258f81612553565b9050919050565b600069ffffffffffffffffffff82169050919050565b6125b581612596565b81146125c057600080fd5b50565b6000815190506125d2816125ac565b92915050565b6000815190506125e781611ca2565b92915050565b6000815190506125fc81611b4d565b92915050565b600080600080600060a0868803121561261e5761261d6119c3565b5b600061262c888289016125c3565b955050602061263d888289016125d8565b945050604061264e888289016125ed565b935050606061265f888289016125ed565b9250506080612670888289016125c3565b9150509295509295909350565b7f7b226e616d65223a220000000000000000000000000000000000000000000000600082015250565b60006126b360098361238f565b91506126be8261267d565b600982019050919050565b7f222c20226465736372697074696f6e223a22416e204e4654207468617420636860008201527f616e676573206261736564206f6e2074686520436861696e6c696e6b2046656560208201527f64222c2000000000000000000000000000000000000000000000000000000000604082015250565b600061274b60448361238f565b9150612756826126c9565b604482019050919050565b7f2261747472696275746573223a205b7b2274726169745f74797065223a20226360008201527f6f6f6c6e657373222c202276616c7565223a203130307d5d2c2022696d61676560208201527f223a220000000000000000000000000000000000000000000000000000000000604082015250565b60006127e360438361238f565b91506127ee82612761565b604382019050919050565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b600061282f60028361238f565b915061283a826127f9565b600282019050919050565b6000612850826126a6565b915061285c828561239a565b91506128678261273e565b9150612872826127d6565b915061287e828461239a565b915061288982612822565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006128cf82611b43565b91506128da83611b43565b9250826128ea576128e9612895565b5b828204905092915050565b600061290082611b43565b915061290b83611b43565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561294457612943612278565b5b828202905092915050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006129ab602583611a93565b91506129b68261294f565b604082019050919050565b600060208201905081810360008301526129da8161299e565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612a3d602483611a93565b9150612a48826129e1565b604082019050919050565b60006020820190508181036000830152612a6c81612a30565b9050919050565b6000612a7e82611b43565b9150612a8983611b43565b925082821015612a9c57612a9b612278565b5b828203905092915050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612add601983611a93565b9150612ae882612aa7565b602082019050919050565b60006020820190508181036000830152612b0c81612ad0565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000612b6f603283611a93565b9150612b7a82612b13565b604082019050919050565b60006020820190508181036000830152612b9e81612b62565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000612bcc82612ba5565b612bd68185612bb0565b9350612be6818560208601611aa4565b612bef81611ad7565b840191505092915050565b6000608082019050612c0f6000830187611bd8565b612c1c6020830186611bd8565b612c296040830185611c6e565b8181036060830152612c3b8184612bc1565b905095945050505050565b600081519050612c55816119f9565b92915050565b600060208284031215612c7157612c706119c3565b5b6000612c7f84828501612c46565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000612cbe602083611a93565b9150612cc982612c88565b602082019050919050565b60006020820190508181036000830152612ced81612cb1565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000612d2a601c83611a93565b9150612d3582612cf4565b602082019050919050565b60006020820190508181036000830152612d5981612d1d565b905091905056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220e878717b789a3bc82ed967b3971b58bc66c1ebb1f6363518c5257bc7db4a8cb664736f6c634300080800334142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c806342842e0e11610097578063a22cb46511610066578063a22cb465146102bf578063b88d4fde146102db578063c87b56dd146102f7578063e985e9c51461032757610100565b806342842e0e146102255780636352211e1461024157806370a082311461027157806395d89b41146102a157610100565b80630b21a83b116100d35780630b21a83b1461019f5780631e930812146101bd57806323b872dd146101d957806328e83cc8146101f557610100565b806301ffc9a71461010557806306fdde0314610135578063081812fc14610153578063095ea7b314610183575b600080fd5b61011f600480360381019061011a9190611a25565b610357565b60405161012c9190611a6d565b60405180910390f35b61013d610439565b60405161014a9190611b21565b60405180910390f35b61016d60048036038101906101689190611b79565b6104cb565b60405161017a9190611be7565b60405180910390f35b61019d60048036038101906101989190611c2e565b610511565b005b6101a7610629565b6040516101b49190611c7d565b60405180910390f35b6101d760048036038101906101d29190611cce565b61062f565b005b6101f360048036038101906101ee9190611cfb565b6106a7565b005b61020f600480360381019061020a9190611e83565b610707565b60405161021c9190611b21565b60405180910390f35b61023f600480360381019061023a9190611cfb565b610794565b005b61025b60048036038101906102569190611b79565b6107b4565b6040516102689190611be7565b60405180910390f35b61028b60048036038101906102869190611ecc565b610866565b6040516102989190611c7d565b60405180910390f35b6102a961091e565b6040516102b69190611b21565b60405180910390f35b6102d960048036038101906102d49190611f25565b6109b0565b005b6102f560048036038101906102f09190612006565b6109c6565b005b610311600480360381019061030c9190611b79565b610a28565b60405161031e9190611b21565b60405180910390f35b610341600480360381019061033c9190612089565b610cb1565b60405161034e9190611a6d565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061042257507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610432575061043182610ebe565b5b9050919050565b606060008054610448906120f8565b80601f0160208091040260200160405190810160405280929190818152602001828054610474906120f8565b80156104c15780601f10610496576101008083540402835291602001916104c1565b820191906000526020600020905b8154815290600101906020018083116104a457829003601f168201915b5050505050905090565b60006104d682610f28565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061051c826107b4565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561058d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105849061219c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166105ac610f73565b73ffffffffffffffffffffffffffffffffffffffff1614806105db57506105da816105d5610f73565b610cb1565b5b61061a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106119061222e565b60405180910390fd5b6106248383610f7b565b505050565b60065481565b80600960006006548152602001908152602001600020819055506006547f882d3b5a729a8bb95cf6c0083c99b42ecd9637123d4425bd7b768877fd8af8b08260405161067b919061225d565b60405180910390a261068f33600654611034565b600160065461069e91906122a7565b60068190555050565b6106b86106b2610f73565b82611052565b6106f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ee9061236f565b60405180910390fd5b6107028383836110e7565b505050565b606060006107338360405160200161071f91906123cb565b604051602081830303815290604052610d45565b90506040518060400160405280601a81526020017f646174613a696d6167652f7376672b786d6c3b6261736536342c0000000000008152508160405160200161077d9291906123e2565b604051602081830303815290604052915050919050565b6107af838383604051806020016040528060008152506109c6565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561085d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085490612452565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156108d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ce906124e4565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606001805461092d906120f8565b80601f0160208091040260200160405190810160405280929190818152602001828054610959906120f8565b80156109a65780601f1061097b576101008083540402835291602001916109a6565b820191906000526020600020905b81548152906001019060200180831161098957829003601f168201915b5050505050905090565b6109c26109bb610f73565b838361134e565b5050565b6109d76109d1610f73565b83611052565b610a16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0d9061236f565b60405180910390fd5b610a22848484846114bb565b50505050565b6060610a3382611517565b610a72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6990612576565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610ada57600080fd5b505afa158015610aee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b129190612602565b505050915050600060078054610b27906120f8565b80601f0160208091040260200160405190810160405280929190818152602001828054610b53906120f8565b8015610ba05780601f10610b7557610100808354040283529160200191610ba0565b820191906000526020600020905b815481529060010190602001808311610b8357829003601f168201915b5050505050905060096000858152602001908152602001600020548212610c4f5760088054610bce906120f8565b80601f0160208091040260200160405190810160405280929190818152602001828054610bfa906120f8565b8015610c475780601f10610c1c57610100808354040283529160200191610c47565b820191906000526020600020905b815481529060010190602001808311610c2a57829003601f168201915b505050505090505b610c57611583565b610c88610c62610439565b83604051602001610c74929190612845565b604051602081830303815290604052610d45565b604051602001610c999291906123e2565b60405160208183030381529060405292505050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6060600082511415610d6857604051806020016040528060008152509050610eb9565b6000604051806060016040528060408152602001612d616040913990506000600360028551610d9791906122a7565b610da191906128c4565b6004610dad91906128f5565b90506000602082610dbe91906122a7565b67ffffffffffffffff811115610dd757610dd6611d58565b5b6040519080825280601f01601f191660200182016040528015610e095781602001600182028036833780820191505090505b509050818152600183018586518101602084015b81831015610e78576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825360018201915050610e1d565b600389510660018114610e925760028114610ea257610ead565b613d3d60f01b6002830352610ead565b603d60f81b60018303525b50505050508093505050505b919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610f3181611517565b610f70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6790612452565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610fee836107b4565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b61104e8282604051806020016040528060008152506115c0565b5050565b60008061105e836107b4565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806110a0575061109f8185610cb1565b5b806110de57508373ffffffffffffffffffffffffffffffffffffffff166110c6846104cb565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611107826107b4565b73ffffffffffffffffffffffffffffffffffffffff161461115d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611154906129c1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156111cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c490612a53565b60405180910390fd5b6111d883838361161b565b6111e3600082610f7b565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112339190612a73565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461128a91906122a7565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611349838383611620565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156113bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b490612af3565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516114ae9190611a6d565b60405180910390a3505050565b6114c68484846110e7565b6114d284848484611625565b611511576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150890612b85565b60405180910390fd5b50505050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60606040518060400160405280601d81526020017f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815250905090565b6115ca83836117bc565b6115d76000848484611625565b611616576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160d90612b85565b60405180910390fd5b505050565b505050565b505050565b60006116468473ffffffffffffffffffffffffffffffffffffffff16611996565b156117af578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261166f610f73565b8786866040518563ffffffff1660e01b81526004016116919493929190612bfa565b602060405180830381600087803b1580156116ab57600080fd5b505af19250505080156116dc57506040513d601f19601f820116820180604052508101906116d99190612c5b565b60015b61175f573d806000811461170c576040519150601f19603f3d011682016040523d82523d6000602084013e611711565b606091505b50600081511415611757576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161174e90612b85565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506117b4565b600190505b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561182c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161182390612cd4565b60405180910390fd5b61183581611517565b15611875576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186c90612d40565b60405180910390fd5b6118816000838361161b565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546118d191906122a7565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461199260008383611620565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611a02816119cd565b8114611a0d57600080fd5b50565b600081359050611a1f816119f9565b92915050565b600060208284031215611a3b57611a3a6119c3565b5b6000611a4984828501611a10565b91505092915050565b60008115159050919050565b611a6781611a52565b82525050565b6000602082019050611a826000830184611a5e565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611ac2578082015181840152602081019050611aa7565b83811115611ad1576000848401525b50505050565b6000601f19601f8301169050919050565b6000611af382611a88565b611afd8185611a93565b9350611b0d818560208601611aa4565b611b1681611ad7565b840191505092915050565b60006020820190508181036000830152611b3b8184611ae8565b905092915050565b6000819050919050565b611b5681611b43565b8114611b6157600080fd5b50565b600081359050611b7381611b4d565b92915050565b600060208284031215611b8f57611b8e6119c3565b5b6000611b9d84828501611b64565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611bd182611ba6565b9050919050565b611be181611bc6565b82525050565b6000602082019050611bfc6000830184611bd8565b92915050565b611c0b81611bc6565b8114611c1657600080fd5b50565b600081359050611c2881611c02565b92915050565b60008060408385031215611c4557611c446119c3565b5b6000611c5385828601611c19565b9250506020611c6485828601611b64565b9150509250929050565b611c7781611b43565b82525050565b6000602082019050611c926000830184611c6e565b92915050565b6000819050919050565b611cab81611c98565b8114611cb657600080fd5b50565b600081359050611cc881611ca2565b92915050565b600060208284031215611ce457611ce36119c3565b5b6000611cf284828501611cb9565b91505092915050565b600080600060608486031215611d1457611d136119c3565b5b6000611d2286828701611c19565b9350506020611d3386828701611c19565b9250506040611d4486828701611b64565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611d9082611ad7565b810181811067ffffffffffffffff82111715611daf57611dae611d58565b5b80604052505050565b6000611dc26119b9565b9050611dce8282611d87565b919050565b600067ffffffffffffffff821115611dee57611ded611d58565b5b611df782611ad7565b9050602081019050919050565b82818337600083830152505050565b6000611e26611e2184611dd3565b611db8565b905082815260208101848484011115611e4257611e41611d53565b5b611e4d848285611e04565b509392505050565b600082601f830112611e6a57611e69611d4e565b5b8135611e7a848260208601611e13565b91505092915050565b600060208284031215611e9957611e986119c3565b5b600082013567ffffffffffffffff811115611eb757611eb66119c8565b5b611ec384828501611e55565b91505092915050565b600060208284031215611ee257611ee16119c3565b5b6000611ef084828501611c19565b91505092915050565b611f0281611a52565b8114611f0d57600080fd5b50565b600081359050611f1f81611ef9565b92915050565b60008060408385031215611f3c57611f3b6119c3565b5b6000611f4a85828601611c19565b9250506020611f5b85828601611f10565b9150509250929050565b600067ffffffffffffffff821115611f8057611f7f611d58565b5b611f8982611ad7565b9050602081019050919050565b6000611fa9611fa484611f65565b611db8565b905082815260208101848484011115611fc557611fc4611d53565b5b611fd0848285611e04565b509392505050565b600082601f830112611fed57611fec611d4e565b5b8135611ffd848260208601611f96565b91505092915050565b600080600080608085870312156120205761201f6119c3565b5b600061202e87828801611c19565b945050602061203f87828801611c19565b935050604061205087828801611b64565b925050606085013567ffffffffffffffff811115612071576120706119c8565b5b61207d87828801611fd8565b91505092959194509250565b600080604083850312156120a05761209f6119c3565b5b60006120ae85828601611c19565b92505060206120bf85828601611c19565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061211057607f821691505b60208210811415612124576121236120c9565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612186602183611a93565b91506121918261212a565b604082019050919050565b600060208201905081810360008301526121b581612179565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b6000612218603e83611a93565b9150612223826121bc565b604082019050919050565b600060208201905081810360008301526122478161220b565b9050919050565b61225781611c98565b82525050565b6000602082019050612272600083018461224e565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006122b282611b43565b91506122bd83611b43565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156122f2576122f1612278565b5b828201905092915050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000612359602e83611a93565b9150612364826122fd565b604082019050919050565b600060208201905081810360008301526123888161234c565b9050919050565b600081905092915050565b60006123a582611a88565b6123af818561238f565b93506123bf818560208601611aa4565b80840191505092915050565b60006123d7828461239a565b915081905092915050565b60006123ee828561239a565b91506123fa828461239a565b91508190509392505050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b600061243c601883611a93565b915061244782612406565b602082019050919050565b6000602082019050818103600083015261246b8161242f565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b60006124ce602983611a93565b91506124d982612472565b604082019050919050565b600060208201905081810360008301526124fd816124c1565b9050919050565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b6000612560602f83611a93565b915061256b82612504565b604082019050919050565b6000602082019050818103600083015261258f81612553565b9050919050565b600069ffffffffffffffffffff82169050919050565b6125b581612596565b81146125c057600080fd5b50565b6000815190506125d2816125ac565b92915050565b6000815190506125e781611ca2565b92915050565b6000815190506125fc81611b4d565b92915050565b600080600080600060a0868803121561261e5761261d6119c3565b5b600061262c888289016125c3565b955050602061263d888289016125d8565b945050604061264e888289016125ed565b935050606061265f888289016125ed565b9250506080612670888289016125c3565b9150509295509295909350565b7f7b226e616d65223a220000000000000000000000000000000000000000000000600082015250565b60006126b360098361238f565b91506126be8261267d565b600982019050919050565b7f222c20226465736372697074696f6e223a22416e204e4654207468617420636860008201527f616e676573206261736564206f6e2074686520436861696e6c696e6b2046656560208201527f64222c2000000000000000000000000000000000000000000000000000000000604082015250565b600061274b60448361238f565b9150612756826126c9565b604482019050919050565b7f2261747472696275746573223a205b7b2274726169745f74797065223a20226360008201527f6f6f6c6e657373222c202276616c7565223a203130307d5d2c2022696d61676560208201527f223a220000000000000000000000000000000000000000000000000000000000604082015250565b60006127e360438361238f565b91506127ee82612761565b604382019050919050565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b600061282f60028361238f565b915061283a826127f9565b600282019050919050565b6000612850826126a6565b915061285c828561239a565b91506128678261273e565b9150612872826127d6565b915061287e828461239a565b915061288982612822565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006128cf82611b43565b91506128da83611b43565b9250826128ea576128e9612895565b5b828204905092915050565b600061290082611b43565b915061290b83611b43565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561294457612943612278565b5b828202905092915050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006129ab602583611a93565b91506129b68261294f565b604082019050919050565b600060208201905081810360008301526129da8161299e565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612a3d602483611a93565b9150612a48826129e1565b604082019050919050565b60006020820190508181036000830152612a6c81612a30565b9050919050565b6000612a7e82611b43565b9150612a8983611b43565b925082821015612a9c57612a9b612278565b5b828203905092915050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612add601983611a93565b9150612ae882612aa7565b602082019050919050565b60006020820190508181036000830152612b0c81612ad0565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000612b6f603283611a93565b9150612b7a82612b13565b604082019050919050565b60006020820190508181036000830152612b9e81612b62565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000612bcc82612ba5565b612bd68185612bb0565b9350612be6818560208601611aa4565b612bef81611ad7565b840191505092915050565b6000608082019050612c0f6000830187611bd8565b612c1c6020830186611bd8565b612c296040830185611c6e565b8181036060830152612c3b8184612bc1565b905095945050505050565b600081519050612c55816119f9565b92915050565b600060208284031215612c7157612c706119c3565b5b6000612c7f84828501612c46565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000612cbe602083611a93565b9150612cc982612c88565b602082019050919050565b60006020820190508181036000830152612ced81612cb1565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000612d2a601c83611a93565b9150612d3582612cf4565b602082019050919050565b60006020820190508181036000830152612d5981612d1d565b905091905056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220e878717b789a3bc82ed967b3971b58bc66c1ebb1f6363518c5257bc7db4a8cb664736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1296,
        "contract": "contracts/DynamicSvgNft.sol:DynamicSvgNft",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1298,
        "contract": "contracts/DynamicSvgNft.sol:DynamicSvgNft",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1302,
        "contract": "contracts/DynamicSvgNft.sol:DynamicSvgNft",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1306,
        "contract": "contracts/DynamicSvgNft.sol:DynamicSvgNft",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1310,
        "contract": "contracts/DynamicSvgNft.sol:DynamicSvgNft",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1316,
        "contract": "contracts/DynamicSvgNft.sol:DynamicSvgNft",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3185,
        "contract": "contracts/DynamicSvgNft.sol:DynamicSvgNft",
        "label": "s_tokenCounter",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 3187,
        "contract": "contracts/DynamicSvgNft.sol:DynamicSvgNft",
        "label": "i_lowImgUri",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 3189,
        "contract": "contracts/DynamicSvgNft.sol:DynamicSvgNft",
        "label": "i_highImgUri",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 3193,
        "contract": "contracts/DynamicSvgNft.sol:DynamicSvgNft",
        "label": "s_tokenIdToHighValues",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_int256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_int256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}